
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000002f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094d  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000775  00000000  00000000  00000d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048b  00000000  00000000  00001492  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000186  00000000  00000000  00001e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:




void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	//Vref = AVcc = 5Vs
	ADMUX |= (1 << REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR);	//left adjust
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);	//turn on ADC
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//interruption
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	
	//prescaler 128 > 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ba:	80 81       	ld	r24, Z
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC0D);	//disable PC0 digital input
  c0:	ee e7       	ldi	r30, 0x7E	; 126
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <main>:

void initADC(void);

int main(void)
{
	cli();
  cc:	f8 94       	cli
	DDRB |= (1 << PORTB2);		//PB6 as output (OC0A and OCR0B)
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	84 b9       	out	0x04, r24	; 4
	/*TCCR1A = 0;
	TCCR1B = 0;*/
	
	DDRC = 0;		//entire port c as input
  d4:	17 b8       	out	0x07, r1	; 7
	
	
	initFastPWM1(settedUp, 8);
  d6:	68 e0       	ldi	r22, 0x08	; 8
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 c3 00 	call	0x186	; 0x186 <initFastPWM1>
	channel(channelB, nop);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	0e 94 a2 00 	call	0x144	; 0x144 <channel>
	topValue(39999);
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9c e9       	ldi	r25, 0x9C	; 156
  ec:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <topValue>
	uint16_t i = 0;
	//uint8_t restart = 0;
	uint16_t j = 1000;
	OCR1B = j;
	*/
	initADC();
  f0:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	sei();
  f4:	78 94       	sei
	
	while (1)
	{
		ADCSRA |= (1 << ADSC);
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x38>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x3e>
 10a:	00 00       	nop
		_delay_ms(2);
		
		
		convertServo(ADCH, channelB);
 10c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 0b 01 	call	0x216	; 0x216 <convertServo>
 118:	ee cf       	rjmp	.-36     	; 0xf6 <main+0x2a>

0000011a <__vector_21>:
	
	DIDR0 |= (1 << ADC0D);	//disable PC0 digital input
}


ISR (ADC_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	//PORTD = ADCH;			//show in portd value of adc
	ADCSRA |= (1 << ADIF);	//turn off flag
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	80 83       	st	Z, r24
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <channel>:
uint16_t topVal = 0;
uint16_t i, j;		//transition variables

//(channel <- channelA/channelB, inverted <- yes/nop)
void channel(uint8_t setChannel, uint8_t inverted){
	switch(setChannel){
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	19 f0       	breq	.+6      	; 0x14e <channel+0xa>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	79 f0       	breq	.+30     	; 0x16a <channel+0x26>
 14c:	08 95       	ret
		case 1:
			if(inverted == 1){
 14e:	61 30       	cpi	r22, 0x01	; 1
 150:	31 f4       	brne	.+12     	; 0x15e <channel+0x1a>
				TCCR1A |= (1 << COM1A0) | (1 << COM1A1);	//channel A inverted
 152:	e0 e8       	ldi	r30, 0x80	; 128
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 6c       	ori	r24, 0xC0	; 192
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret
			}else{
				TCCR1A |= (1 << COM1A1);					//channel A no inverted
 15e:	e0 e8       	ldi	r30, 0x80	; 128
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 68       	ori	r24, 0x80	; 128
 166:	80 83       	st	Z, r24
 168:	08 95       	ret
			}
		break;
		
		case 2:
			if(inverted == 1){
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	31 f4       	brne	.+12     	; 0x17a <channel+0x36>
				TCCR1A |= (1 << COM1B0) | (1 << COM1B1);	//channelB inverted
 16e:	e0 e8       	ldi	r30, 0x80	; 128
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 63       	ori	r24, 0x30	; 48
 176:	80 83       	st	Z, r24
 178:	08 95       	ret
			}else{
				TCCR1A |= (1 << COM1B1);					//channelB no inverted
 17a:	e0 e8       	ldi	r30, 0x80	; 128
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 62       	ori	r24, 0x20	; 32
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <initFastPWM1>:
/*Settings for Fast PWM 1, 16 bits, use it just one time
(inverted <- yes/nop, modePWM <- normal/settedUp, prescaler <- 1,8,64,256,1024)
*/
void initFastPWM1(uint8_t modePWM, uint16_t prescaler){
	//initialize register timer1
	TCCR1A = 0;
 186:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 18a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	switch (prescaler)
 18e:	68 30       	cpi	r22, 0x08	; 8
 190:	71 05       	cpc	r23, r1
 192:	21 f0       	breq	.+8      	; 0x19c <initFastPWM1+0x16>
 194:	61 15       	cp	r22, r1
 196:	74 40       	sbci	r23, 0x04	; 4
 198:	39 f0       	breq	.+14     	; 0x1a8 <initFastPWM1+0x22>
 19a:	0b c0       	rjmp	.+22     	; 0x1b2 <initFastPWM1+0x2c>
	{
		case 8:
			TCCR1B |= (1 << CS11);					//prescaler 8
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	90 81       	ld	r25, Z
 1a2:	92 60       	ori	r25, 0x02	; 2
 1a4:	90 83       	st	Z, r25
		break;
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <initFastPWM1+0x2c>
		
		case 1024:
			TCCR1B |= (1 << CS10) | (1 << CS12);	//prescaler 1024
 1a8:	e1 e8       	ldi	r30, 0x81	; 129
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	90 81       	ld	r25, Z
 1ae:	95 60       	ori	r25, 0x05	; 5
 1b0:	90 83       	st	Z, r25
		break;
	}
	
	//selecting mode of operation
	switch (modePWM)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	19 f0       	breq	.+6      	; 0x1bc <initFastPWM1+0x36>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	61 f0       	breq	.+24     	; 0x1d2 <initFastPWM1+0x4c>
 1ba:	08 95       	ret
	{
		case normal:
			//fast PWM 10-bit resolution
			TCCR1A |= (1 << WGM11) | (1 << WGM10);
 1bc:	e0 e8       	ldi	r30, 0x80	; 128
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	83 60       	ori	r24, 0x03	; 3
 1c4:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12);
 1c6:	e1 e8       	ldi	r30, 0x81	; 129
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	80 83       	st	Z, r24
		break;
 1d0:	08 95       	ret
		
		case settedUp:
			//fast PWM with ICR1 as TOP
			TCCR1A |= (1 << WGM11);
 1d2:	e0 e8       	ldi	r30, 0x80	; 128
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12) | (1 << WGM13);
 1dc:	e1 e8       	ldi	r30, 0x81	; 129
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	88 61       	ori	r24, 0x18	; 24
 1e4:	80 83       	st	Z, r24
			topVal = 1;		//set if it's required a top value
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f2:	08 95       	ret

000001f4 <topValue>:
	
}

//topValue, used if mode is settedUp
void topValue(uint16_t top){
	if (topVal == 1)	{
 1f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1fc:	21 30       	cpi	r18, 0x01	; 1
 1fe:	31 05       	cpc	r19, r1
 200:	29 f4       	brne	.+10     	; 0x20c <topValue+0x18>
		ICR1 = top;		//set top value
 202:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 206:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 20a:	08 95       	ret
	}else{
		topVal = 0;
 20c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 210:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 214:	08 95       	ret

00000216 <convertServo>:
}

//conversion for servos, mapping values
void convertServo(uint16_t analogIn, uint8_t selChannel){
	
	switch(selChannel){
 216:	61 30       	cpi	r22, 0x01	; 1
 218:	19 f0       	breq	.+6      	; 0x220 <convertServo+0xa>
 21a:	62 30       	cpi	r22, 0x02	; 2
 21c:	c9 f0       	breq	.+50     	; 0x250 <convertServo+0x3a>
 21e:	08 95       	ret
		case 1:
			i = ADCH;
 220:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <i+0x1>
 22a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
			j = (200/12)*i+1000;
 22e:	82 95       	swap	r24
 230:	92 95       	swap	r25
 232:	90 7f       	andi	r25, 0xF0	; 240
 234:	98 27       	eor	r25, r24
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	98 27       	eor	r25, r24
 23a:	88 51       	subi	r24, 0x18	; 24
 23c:	9c 4f       	sbci	r25, 0xFC	; 252
 23e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <j+0x1>
 242:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <j>
			OCR1A = j;
 246:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 24a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 24e:	08 95       	ret
		
		case 2:
			i = ADCH;
 250:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <i+0x1>
 25a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
			j = (200/12)*i+1000;
 25e:	82 95       	swap	r24
 260:	92 95       	swap	r25
 262:	90 7f       	andi	r25, 0xF0	; 240
 264:	98 27       	eor	r25, r24
 266:	80 7f       	andi	r24, 0xF0	; 240
 268:	98 27       	eor	r25, r24
 26a:	88 51       	subi	r24, 0x18	; 24
 26c:	9c 4f       	sbci	r25, 0xFC	; 252
 26e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <j+0x1>
 272:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <j>
			OCR1B = j;
 276:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 27a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
