
Postlab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000039a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098f  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000791  00000000  00000000  00000e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f0  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000440  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b5  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002159  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:




void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	//Vref = AVcc = 5Vs
	ADMUX |= (1 << REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR);	//left adjust
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);	//turn on ADC
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//interruption
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	
	//prescaler 128 > 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ba:	80 81       	ld	r24, Z
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D);	//disable PC0 - PC2 digital input
  c0:	ee e7       	ldi	r30, 0x7E	; 126
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	87 60       	ori	r24, 0x07	; 7
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <main>:

void initADC(void);

int main(void)
{
	cli();
  cc:	f8 94       	cli
	DDRB |= (1 << PORTB2) | (1 << PORTB1);		//PB6 as output (OC0A and OCR0B)
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	86 60       	ori	r24, 0x06	; 6
  d2:	84 b9       	out	0x04, r24	; 4
	/*TCCR1A = 0;
	TCCR1B = 0;*/
	
	DDRC = 0;		//entire port c as input
  d4:	17 b8       	out	0x07, r1	; 7
	
		  
	DDRD |= (1 << PORTD5);		//PB6 as output (OC0A and OCR0B)
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  dc:	1b b8       	out	0x0b, r1	; 11
	TCCR0A = 0;
  de:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
  e0:	15 bc       	out	0x25, r1	; 37
	
	//no inverted and fast PWM, TOP 255 (default)
	TCCR0A |= (1  << WGM00) | (1 << WGM01) | (1 << COM0B1);
  e2:	84 b5       	in	r24, 0x24	; 36
  e4:	83 62       	ori	r24, 0x23	; 35
  e6:	84 bd       	out	0x24, r24	; 36
	
	//Prescaler 1024
	TCCR0B = 0x02;
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	85 bd       	out	0x25, r24	; 37
	 
	
	
	initFastPWM1(settedUp, 8);
  ec:	68 e0       	ldi	r22, 0x08	; 8
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	0e 94 0f 01 	call	0x21e	; 0x21e <initFastPWM1>
	channel(channelA, nop);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <channel>
	channel(channelB, nop);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 ee 00 	call	0x1dc	; 0x1dc <channel>
	topValue(39999);
 104:	8f e3       	ldi	r24, 0x3F	; 63
 106:	9c e9       	ldi	r25, 0x9C	; 156
 108:	0e 94 46 01 	call	0x28c	; 0x28c <topValue>
	uint16_t i = 0;
	//uint8_t restart = 0;
	uint16_t j = 1000;
	OCR1B = j;
	*/
	initADC();
 10c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	sei();
 110:	78 94       	sei
	
	while (1)
	{
		ADCSRA |= (1 << ADSC);
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9f e1       	ldi	r25, 0x1F	; 31
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x54>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x5a>
 126:	00 00       	nop
 128:	f4 cf       	rjmp	.-24     	; 0x112 <main+0x46>

0000012a <__vector_21>:
	DIDR0 |= (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D);	//disable PC0 - PC2 digital input
	//ADMUX = (ADMUX & 0xF0) | 1;
}


ISR (ADC_vect){
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	//PORTD = ADCH;			//show in portd value of adc
	ADCSRA |= (1 << ADIF);	//turn off flag
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 61       	ori	r24, 0x10	; 16
 154:	80 83       	st	Z, r24
	if (count == 0){
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	81 11       	cpse	r24, r1
 15c:	0f c0       	rjmp	.+30     	; 0x17c <__vector_21+0x52>
		count = 1; 
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX = (ADMUX & 0xF0);
 164:	ec e7       	ldi	r30, 0x7C	; 124
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 7f       	andi	r24, 0xF0	; 240
 16c:	80 83       	st	Z, r24
		convertServo(ADCH, channelB);
 16e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 57 01 	call	0x2ae	; 0x2ae <convertServo>
 17a:	1f c0       	rjmp	.+62     	; 0x1ba <__vector_21+0x90>
	}else if(count == 1){
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	81 f4       	brne	.+32     	; 0x1a0 <__vector_21+0x76>
		count = 2;
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX = (ADMUX & 0xF0) | 0x01;
 186:	ec e7       	ldi	r30, 0x7C	; 124
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 7f       	andi	r24, 0xF0	; 240
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 83       	st	Z, r24
		convertServo(ADCH, channelA);
 192:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 57 01 	call	0x2ae	; 0x2ae <convertServo>
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <__vector_21+0x90>
	}else if(count == 2){
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	59 f4       	brne	.+22     	; 0x1ba <__vector_21+0x90>
		count = 0;
 1a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX = (ADMUX & 0xF0) | 0x02;
 1a8:	ec e7       	ldi	r30, 0x7C	; 124
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	80 83       	st	Z, r24
		OCR0B = ADCH;
 1b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1b8:	88 bd       	out	0x28, r24	; 40
	}
}
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <channel>:
uint16_t topVal = 0;
uint16_t i, j;		//transition variables

//(channel <- channelA/channelB, inverted <- yes/nop)
void channel(uint8_t setChannel, uint8_t inverted){
	switch(setChannel){
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	19 f0       	breq	.+6      	; 0x1e6 <channel+0xa>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	79 f0       	breq	.+30     	; 0x202 <channel+0x26>
 1e4:	08 95       	ret
		case 1:
			if(inverted == 1){
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	31 f4       	brne	.+12     	; 0x1f6 <channel+0x1a>
				TCCR1A |= (1 << COM1A0) | (1 << COM1A1);	//channel A inverted
 1ea:	e0 e8       	ldi	r30, 0x80	; 128
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 6c       	ori	r24, 0xC0	; 192
 1f2:	80 83       	st	Z, r24
 1f4:	08 95       	ret
			}else{
				TCCR1A |= (1 << COM1A1);					//channel A no inverted
 1f6:	e0 e8       	ldi	r30, 0x80	; 128
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	80 83       	st	Z, r24
 200:	08 95       	ret
			}
		break;
		
		case 2:
			if(inverted == 1){
 202:	61 30       	cpi	r22, 0x01	; 1
 204:	31 f4       	brne	.+12     	; 0x212 <channel+0x36>
				TCCR1A |= (1 << COM1B0) | (1 << COM1B1);	//channelB inverted
 206:	e0 e8       	ldi	r30, 0x80	; 128
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 63       	ori	r24, 0x30	; 48
 20e:	80 83       	st	Z, r24
 210:	08 95       	ret
			}else{
				TCCR1A |= (1 << COM1B1);					//channelB no inverted
 212:	e0 e8       	ldi	r30, 0x80	; 128
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 62       	ori	r24, 0x20	; 32
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret

0000021e <initFastPWM1>:
/*Settings for Fast PWM 1, 16 bits, use it just one time
(inverted <- yes/nop, modePWM <- normal/settedUp, prescaler <- 1,8,64,256,1024)
*/
void initFastPWM1(uint8_t modePWM, uint16_t prescaler){
	//initialize register timer1
	TCCR1A = 0;
 21e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 222:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	switch (prescaler)
 226:	68 30       	cpi	r22, 0x08	; 8
 228:	71 05       	cpc	r23, r1
 22a:	21 f0       	breq	.+8      	; 0x234 <initFastPWM1+0x16>
 22c:	61 15       	cp	r22, r1
 22e:	74 40       	sbci	r23, 0x04	; 4
 230:	39 f0       	breq	.+14     	; 0x240 <initFastPWM1+0x22>
 232:	0b c0       	rjmp	.+22     	; 0x24a <initFastPWM1+0x2c>
	{
		case 8:
			TCCR1B |= (1 << CS11);					//prescaler 8
 234:	e1 e8       	ldi	r30, 0x81	; 129
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	90 81       	ld	r25, Z
 23a:	92 60       	ori	r25, 0x02	; 2
 23c:	90 83       	st	Z, r25
		break;
 23e:	05 c0       	rjmp	.+10     	; 0x24a <initFastPWM1+0x2c>
		
		case 1024:
			TCCR1B |= (1 << CS10) | (1 << CS12);	//prescaler 1024
 240:	e1 e8       	ldi	r30, 0x81	; 129
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	90 81       	ld	r25, Z
 246:	95 60       	ori	r25, 0x05	; 5
 248:	90 83       	st	Z, r25
		break;
	}
	
	//selecting mode of operation
	switch (modePWM)
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	19 f0       	breq	.+6      	; 0x254 <initFastPWM1+0x36>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	61 f0       	breq	.+24     	; 0x26a <initFastPWM1+0x4c>
 252:	08 95       	ret
	{
		case normal:
			//fast PWM 10-bit resolution
			TCCR1A |= (1 << WGM11) | (1 << WGM10);
 254:	e0 e8       	ldi	r30, 0x80	; 128
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	83 60       	ori	r24, 0x03	; 3
 25c:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12);
 25e:	e1 e8       	ldi	r30, 0x81	; 129
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 60       	ori	r24, 0x08	; 8
 266:	80 83       	st	Z, r24
		break;
 268:	08 95       	ret
		
		case settedUp:
			//fast PWM with ICR1 as TOP
			TCCR1A |= (1 << WGM11);
 26a:	e0 e8       	ldi	r30, 0x80	; 128
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	82 60       	ori	r24, 0x02	; 2
 272:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12) | (1 << WGM13);
 274:	e1 e8       	ldi	r30, 0x81	; 129
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	88 61       	ori	r24, 0x18	; 24
 27c:	80 83       	st	Z, r24
			topVal = 1;		//set if it's required a top value
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <topVal+0x1>
 286:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <topVal>
 28a:	08 95       	ret

0000028c <topValue>:
	
}

//topValue, used if mode is settedUp
void topValue(uint16_t top){
	if (topVal == 1)	{
 28c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <topVal>
 290:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <topVal+0x1>
 294:	21 30       	cpi	r18, 0x01	; 1
 296:	31 05       	cpc	r19, r1
 298:	29 f4       	brne	.+10     	; 0x2a4 <topValue+0x18>
		ICR1 = top;		//set top value
 29a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 29e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2a2:	08 95       	ret
	}else{
		topVal = 0;
 2a4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <topVal+0x1>
 2a8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <topVal>
 2ac:	08 95       	ret

000002ae <convertServo>:
	}
}

//conversion for servos, mapping values
void convertServo(uint16_t analogIn, uint8_t selChannel){
	switch(selChannel){
 2ae:	61 30       	cpi	r22, 0x01	; 1
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <convertServo+0xa>
 2b2:	62 30       	cpi	r22, 0x02	; 2
 2b4:	f1 f0       	breq	.+60     	; 0x2f2 <convertServo+0x44>
 2b6:	08 95       	ret
		case 1:
			i = ADCH;
 2b8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <i+0x1>
 2c2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <i>
			j = (200/11)*i+1000;
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	9c 01       	movw	r18, r24
 2cc:	22 0f       	add	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	82 0f       	add	r24, r18
 2da:	93 1f       	adc	r25, r19
 2dc:	88 51       	subi	r24, 0x18	; 24
 2de:	9c 4f       	sbci	r25, 0xFC	; 252
 2e0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <j+0x1>
 2e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <j>
			OCR1A = j;
 2e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 2f0:	08 95       	ret
		
		case 2:
			i = ADCH;
 2f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <i+0x1>
 2fc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <i>
			j = (200/12)*i+1000;
 300:	82 95       	swap	r24
 302:	92 95       	swap	r25
 304:	90 7f       	andi	r25, 0xF0	; 240
 306:	98 27       	eor	r25, r24
 308:	80 7f       	andi	r24, 0xF0	; 240
 30a:	98 27       	eor	r25, r24
 30c:	88 51       	subi	r24, 0x18	; 24
 30e:	9c 4f       	sbci	r25, 0xFC	; 252
 310:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <j+0x1>
 314:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <j>
			OCR1B = j;
 318:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 31c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 320:	08 95       	ret

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
